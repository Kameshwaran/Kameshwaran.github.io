{"name":"Kameshwaran.GitHub.io","tagline":"","body":"## Array Inquiry\r\n***\r\nConsider the problem, checking the presence of an element in the array. Let us solve this problem using ruby. There are three possible solutions to do it. Let's look into it.\r\n\r\n### 1. Iterating over an array\r\nTraversing over all the elements of the array and comparing them with the given element.\r\n\r\n```\r\nstatus = false\r\narray.each do | element |\r\n  status = true if (element == element_to_find)\r\nend\r\n```\r\n\r\n### 2. Using 'index' method\r\n'index' method in ruby returns the index of an element in the array if the element is present. Otherwise it returns nil.\r\n\r\n```\r\nstatus = array.index(element_to_find).present?\r\n```\r\n\r\n### 3. ArrayInquirer\r\nFinally we need a solution that should solve the problem correctly and efficiently. It should be more readable. Let's see what 'Arrayinquirer' is,\r\n    \r\n```\r\n[\"code\", \"brahma\"].inquiry.code? => true\r\n[\"code\", \"brahma\"].inquiry.brahma? => true\r\n[\"code\", \"brahma\"].inquiry.really? => false\r\n```\r\n\r\nA **ArrayInquirer** is a method which solves the above stated problem in very elegant way. The implementation is as follows,\r\n\r\n```\r\nclass ArrayInquirer < Array\r\n  private\r\n  def method_missing method, *args\r\n    begin\r\n      any? { |element| element.to_s == method[0..-2] }\r\n    rescue NoMethodError\r\n      super method, *args\r\n    end\r\n  end\r\nend\r\n                           \r\nmodule ArrayInquiry\r\n  def inquiry\r\n    ArrayInquirer.new(self)\r\n  end\r\nend\r\n\r\nArray.send(:include, ArrayInquiry)\r\n```\r\n### Explanation\r\n\r\nArrayInquirer extends Array class and implements method_missing. whenever any method is invoked on the array, the method_missing will be called with name and arguments of original call only if the method is not present. Presence of the element is ensured inside the method_missing implementation.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}